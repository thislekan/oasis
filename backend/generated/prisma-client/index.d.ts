// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  course: (where?: CourseWhereInput) => Promise<boolean>;
  department: (where?: DepartmentWhereInput) => Promise<boolean>;
  faculty: (where?: FacultyWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  course: (where: CourseWhereUniqueInput) => CourseNullablePromise;
  courses: (args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Course>;
  coursesConnection: (args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CourseConnectionPromise;
  department: (where: DepartmentWhereUniqueInput) => DepartmentNullablePromise;
  departments: (args?: {
    where?: DepartmentWhereInput;
    orderBy?: DepartmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Department>;
  departmentsConnection: (args?: {
    where?: DepartmentWhereInput;
    orderBy?: DepartmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DepartmentConnectionPromise;
  faculty: (where: FacultyWhereUniqueInput) => FacultyNullablePromise;
  faculties: (args?: {
    where?: FacultyWhereInput;
    orderBy?: FacultyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Faculty>;
  facultiesConnection: (args?: {
    where?: FacultyWhereInput;
    orderBy?: FacultyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FacultyConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCourse: (data: CourseCreateInput) => CoursePromise;
  updateCourse: (args: {
    data: CourseUpdateInput;
    where: CourseWhereUniqueInput;
  }) => CoursePromise;
  updateManyCourses: (args: {
    data: CourseUpdateManyMutationInput;
    where?: CourseWhereInput;
  }) => BatchPayloadPromise;
  upsertCourse: (args: {
    where: CourseWhereUniqueInput;
    create: CourseCreateInput;
    update: CourseUpdateInput;
  }) => CoursePromise;
  deleteCourse: (where: CourseWhereUniqueInput) => CoursePromise;
  deleteManyCourses: (where?: CourseWhereInput) => BatchPayloadPromise;
  createDepartment: (data: DepartmentCreateInput) => DepartmentPromise;
  updateDepartment: (args: {
    data: DepartmentUpdateInput;
    where: DepartmentWhereUniqueInput;
  }) => DepartmentPromise;
  updateManyDepartments: (args: {
    data: DepartmentUpdateManyMutationInput;
    where?: DepartmentWhereInput;
  }) => BatchPayloadPromise;
  upsertDepartment: (args: {
    where: DepartmentWhereUniqueInput;
    create: DepartmentCreateInput;
    update: DepartmentUpdateInput;
  }) => DepartmentPromise;
  deleteDepartment: (where: DepartmentWhereUniqueInput) => DepartmentPromise;
  deleteManyDepartments: (where?: DepartmentWhereInput) => BatchPayloadPromise;
  createFaculty: (data: FacultyCreateInput) => FacultyPromise;
  updateFaculty: (args: {
    data: FacultyUpdateInput;
    where: FacultyWhereUniqueInput;
  }) => FacultyPromise;
  updateManyFaculties: (args: {
    data: FacultyUpdateManyMutationInput;
    where?: FacultyWhereInput;
  }) => BatchPayloadPromise;
  upsertFaculty: (args: {
    where: FacultyWhereUniqueInput;
    create: FacultyCreateInput;
    update: FacultyUpdateInput;
  }) => FacultyPromise;
  deleteFaculty: (where: FacultyWhereUniqueInput) => FacultyPromise;
  deleteManyFaculties: (where?: FacultyWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  course: (
    where?: CourseSubscriptionWhereInput
  ) => CourseSubscriptionPayloadSubscription;
  department: (
    where?: DepartmentSubscriptionWhereInput
  ) => DepartmentSubscriptionPayloadSubscription;
  faculty: (
    where?: FacultySubscriptionWhereInput
  ) => FacultySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type DepartmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type CourseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "creditUnit_ASC"
  | "creditUnit_DESC"
  | "description_ASC"
  | "description_DESC"
  | "level_ASC"
  | "level_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "regNo_ASC"
  | "regNo_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "level_ASC"
  | "level_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "address_ASC"
  | "address_DESC"
  | "image_ASC"
  | "image_DESC";

export type FacultyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateManyWithoutDepartmentInput {
  create?: Maybe<
    UserCreateWithoutDepartmentInput[] | UserCreateWithoutDepartmentInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutDepartmentInput[]
    | UserUpdateWithWhereUniqueWithoutDepartmentInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutDepartmentInput[]
    | UserUpsertWithWhereUniqueWithoutDepartmentInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export type CourseWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface FacultyUpdateDataInput {
  name?: Maybe<String>;
  departments?: Maybe<DepartmentUpdateManyWithoutFacultyInput>;
}

export interface FacultyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  departments_every?: Maybe<DepartmentWhereInput>;
  departments_some?: Maybe<DepartmentWhereInput>;
  departments_none?: Maybe<DepartmentWhereInput>;
  AND?: Maybe<FacultyWhereInput[] | FacultyWhereInput>;
  OR?: Maybe<FacultyWhereInput[] | FacultyWhereInput>;
  NOT?: Maybe<FacultyWhereInput[] | FacultyWhereInput>;
}

export interface DepartmentCreateOneWithoutStudentsInput {
  create?: Maybe<DepartmentCreateWithoutStudentsInput>;
  connect?: Maybe<DepartmentWhereUniqueInput>;
}

export interface FacultyUpsertNestedInput {
  update: FacultyUpdateDataInput;
  create: FacultyCreateInput;
}

export interface DepartmentCreateWithoutStudentsInput {
  id?: Maybe<ID_Input>;
  name: String;
  faculty: FacultyCreateOneWithoutDepartmentsInput;
  courses?: Maybe<CourseCreateManyWithoutDepartmentInput>;
}

export interface DepartmentUpdateManyWithoutFacultyInput {
  create?: Maybe<
    DepartmentCreateWithoutFacultyInput[] | DepartmentCreateWithoutFacultyInput
  >;
  delete?: Maybe<DepartmentWhereUniqueInput[] | DepartmentWhereUniqueInput>;
  connect?: Maybe<DepartmentWhereUniqueInput[] | DepartmentWhereUniqueInput>;
  set?: Maybe<DepartmentWhereUniqueInput[] | DepartmentWhereUniqueInput>;
  disconnect?: Maybe<DepartmentWhereUniqueInput[] | DepartmentWhereUniqueInput>;
  update?: Maybe<
    | DepartmentUpdateWithWhereUniqueWithoutFacultyInput[]
    | DepartmentUpdateWithWhereUniqueWithoutFacultyInput
  >;
  upsert?: Maybe<
    | DepartmentUpsertWithWhereUniqueWithoutFacultyInput[]
    | DepartmentUpsertWithWhereUniqueWithoutFacultyInput
  >;
  deleteMany?: Maybe<DepartmentScalarWhereInput[] | DepartmentScalarWhereInput>;
  updateMany?: Maybe<
    | DepartmentUpdateManyWithWhereNestedInput[]
    | DepartmentUpdateManyWithWhereNestedInput
  >;
}

export interface CourseCreateManyWithoutStudentsInput {
  create?: Maybe<
    CourseCreateWithoutStudentsInput[] | CourseCreateWithoutStudentsInput
  >;
  connect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface CourseCreateWithoutStudentsInput {
  id?: Maybe<ID_Input>;
  name: String;
  department: DepartmentCreateOneWithoutCoursesInput;
  creditUnit: Int;
  description: String;
  level: String;
}

export interface DepartmentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DepartmentWhereInput>;
  AND?: Maybe<
    DepartmentSubscriptionWhereInput[] | DepartmentSubscriptionWhereInput
  >;
  OR?: Maybe<
    DepartmentSubscriptionWhereInput[] | DepartmentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    DepartmentSubscriptionWhereInput[] | DepartmentSubscriptionWhereInput
  >;
}

export interface CourseUpdateInput {
  name?: Maybe<String>;
  department?: Maybe<DepartmentUpdateOneRequiredWithoutCoursesInput>;
  creditUnit?: Maybe<Int>;
  students?: Maybe<UserUpdateManyWithoutCoursesInput>;
  description?: Maybe<String>;
  level?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  regNo?: Maybe<String>;
  gender?: Maybe<String>;
  level?: Maybe<String>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  image?: Maybe<String>;
}

export interface DepartmentUpdateOneRequiredWithoutCoursesInput {
  create?: Maybe<DepartmentCreateWithoutCoursesInput>;
  update?: Maybe<DepartmentUpdateWithoutCoursesDataInput>;
  upsert?: Maybe<DepartmentUpsertWithoutCoursesInput>;
  connect?: Maybe<DepartmentWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  regNo: String;
  gender?: Maybe<String>;
  department?: Maybe<DepartmentCreateOneWithoutStudentsInput>;
  faculty?: Maybe<FacultyCreateOneInput>;
  courses?: Maybe<CourseCreateManyWithoutStudentsInput>;
  level?: Maybe<String>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  image?: Maybe<String>;
}

export interface DepartmentUpdateWithoutCoursesDataInput {
  name?: Maybe<String>;
  faculty?: Maybe<FacultyUpdateOneRequiredWithoutDepartmentsInput>;
  students?: Maybe<UserUpdateManyWithoutDepartmentInput>;
}

export type DepartmentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface FacultyUpdateOneRequiredWithoutDepartmentsInput {
  create?: Maybe<FacultyCreateWithoutDepartmentsInput>;
  update?: Maybe<FacultyUpdateWithoutDepartmentsDataInput>;
  upsert?: Maybe<FacultyUpsertWithoutDepartmentsInput>;
  connect?: Maybe<FacultyWhereUniqueInput>;
}

export interface DepartmentUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface FacultyUpdateWithoutDepartmentsDataInput {
  name?: Maybe<String>;
}

export type FacultyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface FacultyUpsertWithoutDepartmentsInput {
  update: FacultyUpdateWithoutDepartmentsDataInput;
  create: FacultyCreateWithoutDepartmentsInput;
}

export interface CourseUpdateManyMutationInput {
  name?: Maybe<String>;
  creditUnit?: Maybe<Int>;
  description?: Maybe<String>;
  level?: Maybe<String>;
}

export interface CourseUpdateManyWithoutStudentsInput {
  create?: Maybe<
    CourseCreateWithoutStudentsInput[] | CourseCreateWithoutStudentsInput
  >;
  delete?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  connect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  set?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  disconnect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  update?: Maybe<
    | CourseUpdateWithWhereUniqueWithoutStudentsInput[]
    | CourseUpdateWithWhereUniqueWithoutStudentsInput
  >;
  upsert?: Maybe<
    | CourseUpsertWithWhereUniqueWithoutStudentsInput[]
    | CourseUpsertWithWhereUniqueWithoutStudentsInput
  >;
  deleteMany?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
  updateMany?: Maybe<
    | CourseUpdateManyWithWhereNestedInput[]
    | CourseUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpsertWithWhereUniqueWithoutDepartmentInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutDepartmentDataInput;
  create: UserCreateWithoutDepartmentInput;
}

export interface UserUpdateWithWhereUniqueWithoutDepartmentInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutDepartmentDataInput;
}

export interface CourseUpsertWithWhereUniqueWithoutStudentsInput {
  where: CourseWhereUniqueInput;
  update: CourseUpdateWithoutStudentsDataInput;
  create: CourseCreateWithoutStudentsInput;
}

export interface UserUpdateWithoutDepartmentDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  regNo?: Maybe<String>;
  gender?: Maybe<String>;
  faculty?: Maybe<FacultyUpdateOneInput>;
  courses?: Maybe<CourseUpdateManyWithoutStudentsInput>;
  level?: Maybe<String>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  image?: Maybe<String>;
}

export interface CourseUpdateWithWhereUniqueWithoutStudentsInput {
  where: CourseWhereUniqueInput;
  data: CourseUpdateWithoutStudentsDataInput;
}

export interface FacultyUpdateOneInput {
  create?: Maybe<FacultyCreateInput>;
  update?: Maybe<FacultyUpdateDataInput>;
  upsert?: Maybe<FacultyUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<FacultyWhereUniqueInput>;
}

export interface CourseCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  department: DepartmentCreateOneWithoutCoursesInput;
  creditUnit: Int;
  students?: Maybe<UserCreateManyWithoutCoursesInput>;
  description: String;
  level: String;
}

export interface CourseWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  department?: Maybe<DepartmentWhereInput>;
  creditUnit?: Maybe<Int>;
  creditUnit_not?: Maybe<Int>;
  creditUnit_in?: Maybe<Int[] | Int>;
  creditUnit_not_in?: Maybe<Int[] | Int>;
  creditUnit_lt?: Maybe<Int>;
  creditUnit_lte?: Maybe<Int>;
  creditUnit_gt?: Maybe<Int>;
  creditUnit_gte?: Maybe<Int>;
  students_every?: Maybe<UserWhereInput>;
  students_some?: Maybe<UserWhereInput>;
  students_none?: Maybe<UserWhereInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  level?: Maybe<String>;
  level_not?: Maybe<String>;
  level_in?: Maybe<String[] | String>;
  level_not_in?: Maybe<String[] | String>;
  level_lt?: Maybe<String>;
  level_lte?: Maybe<String>;
  level_gt?: Maybe<String>;
  level_gte?: Maybe<String>;
  level_contains?: Maybe<String>;
  level_not_contains?: Maybe<String>;
  level_starts_with?: Maybe<String>;
  level_not_starts_with?: Maybe<String>;
  level_ends_with?: Maybe<String>;
  level_not_ends_with?: Maybe<String>;
  AND?: Maybe<CourseWhereInput[] | CourseWhereInput>;
  OR?: Maybe<CourseWhereInput[] | CourseWhereInput>;
  NOT?: Maybe<CourseWhereInput[] | CourseWhereInput>;
}

export interface DepartmentCreateWithoutCoursesInput {
  id?: Maybe<ID_Input>;
  name: String;
  faculty: FacultyCreateOneWithoutDepartmentsInput;
  students?: Maybe<UserCreateManyWithoutDepartmentInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  regNo?: Maybe<String>;
  regNo_not?: Maybe<String>;
  regNo_in?: Maybe<String[] | String>;
  regNo_not_in?: Maybe<String[] | String>;
  regNo_lt?: Maybe<String>;
  regNo_lte?: Maybe<String>;
  regNo_gt?: Maybe<String>;
  regNo_gte?: Maybe<String>;
  regNo_contains?: Maybe<String>;
  regNo_not_contains?: Maybe<String>;
  regNo_starts_with?: Maybe<String>;
  regNo_not_starts_with?: Maybe<String>;
  regNo_ends_with?: Maybe<String>;
  regNo_not_ends_with?: Maybe<String>;
  gender?: Maybe<String>;
  gender_not?: Maybe<String>;
  gender_in?: Maybe<String[] | String>;
  gender_not_in?: Maybe<String[] | String>;
  gender_lt?: Maybe<String>;
  gender_lte?: Maybe<String>;
  gender_gt?: Maybe<String>;
  gender_gte?: Maybe<String>;
  gender_contains?: Maybe<String>;
  gender_not_contains?: Maybe<String>;
  gender_starts_with?: Maybe<String>;
  gender_not_starts_with?: Maybe<String>;
  gender_ends_with?: Maybe<String>;
  gender_not_ends_with?: Maybe<String>;
  department?: Maybe<DepartmentWhereInput>;
  faculty?: Maybe<FacultyWhereInput>;
  courses_every?: Maybe<CourseWhereInput>;
  courses_some?: Maybe<CourseWhereInput>;
  courses_none?: Maybe<CourseWhereInput>;
  level?: Maybe<String>;
  level_not?: Maybe<String>;
  level_in?: Maybe<String[] | String>;
  level_not_in?: Maybe<String[] | String>;
  level_lt?: Maybe<String>;
  level_lte?: Maybe<String>;
  level_gt?: Maybe<String>;
  level_gte?: Maybe<String>;
  level_contains?: Maybe<String>;
  level_not_contains?: Maybe<String>;
  level_starts_with?: Maybe<String>;
  level_not_starts_with?: Maybe<String>;
  level_ends_with?: Maybe<String>;
  level_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface FacultyCreateWithoutDepartmentsInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface DepartmentUpdateWithWhereUniqueWithoutFacultyInput {
  where: DepartmentWhereUniqueInput;
  data: DepartmentUpdateWithoutFacultyDataInput;
}

export interface UserCreateWithoutDepartmentInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  regNo: String;
  gender?: Maybe<String>;
  faculty?: Maybe<FacultyCreateOneInput>;
  courses?: Maybe<CourseCreateManyWithoutStudentsInput>;
  level?: Maybe<String>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  image?: Maybe<String>;
}

export interface DepartmentUpdateWithoutFacultyDataInput {
  name?: Maybe<String>;
  courses?: Maybe<CourseUpdateManyWithoutDepartmentInput>;
  students?: Maybe<UserUpdateManyWithoutDepartmentInput>;
}

export interface FacultyCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  departments?: Maybe<DepartmentCreateManyWithoutFacultyInput>;
}

export interface CourseUpdateManyWithoutDepartmentInput {
  create?: Maybe<
    CourseCreateWithoutDepartmentInput[] | CourseCreateWithoutDepartmentInput
  >;
  delete?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  connect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  set?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  disconnect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  update?: Maybe<
    | CourseUpdateWithWhereUniqueWithoutDepartmentInput[]
    | CourseUpdateWithWhereUniqueWithoutDepartmentInput
  >;
  upsert?: Maybe<
    | CourseUpsertWithWhereUniqueWithoutDepartmentInput[]
    | CourseUpsertWithWhereUniqueWithoutDepartmentInput
  >;
  deleteMany?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
  updateMany?: Maybe<
    | CourseUpdateManyWithWhereNestedInput[]
    | CourseUpdateManyWithWhereNestedInput
  >;
}

export interface DepartmentCreateWithoutFacultyInput {
  id?: Maybe<ID_Input>;
  name: String;
  courses?: Maybe<CourseCreateManyWithoutDepartmentInput>;
  students?: Maybe<UserCreateManyWithoutDepartmentInput>;
}

export interface CourseUpdateWithWhereUniqueWithoutDepartmentInput {
  where: CourseWhereUniqueInput;
  data: CourseUpdateWithoutDepartmentDataInput;
}

export interface CourseCreateWithoutDepartmentInput {
  id?: Maybe<ID_Input>;
  name: String;
  creditUnit: Int;
  students?: Maybe<UserCreateManyWithoutCoursesInput>;
  description: String;
  level: String;
}

export interface CourseUpdateWithoutDepartmentDataInput {
  name?: Maybe<String>;
  creditUnit?: Maybe<Int>;
  students?: Maybe<UserUpdateManyWithoutCoursesInput>;
  description?: Maybe<String>;
  level?: Maybe<String>;
}

export interface UserCreateWithoutCoursesInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  regNo: String;
  gender?: Maybe<String>;
  department?: Maybe<DepartmentCreateOneWithoutStudentsInput>;
  faculty?: Maybe<FacultyCreateOneInput>;
  level?: Maybe<String>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  image?: Maybe<String>;
}

export interface UserUpdateManyWithoutCoursesInput {
  create?: Maybe<
    UserCreateWithoutCoursesInput[] | UserCreateWithoutCoursesInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutCoursesInput[]
    | UserUpdateWithWhereUniqueWithoutCoursesInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutCoursesInput[]
    | UserUpsertWithWhereUniqueWithoutCoursesInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface FacultySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FacultyWhereInput>;
  AND?: Maybe<FacultySubscriptionWhereInput[] | FacultySubscriptionWhereInput>;
  OR?: Maybe<FacultySubscriptionWhereInput[] | FacultySubscriptionWhereInput>;
  NOT?: Maybe<FacultySubscriptionWhereInput[] | FacultySubscriptionWhereInput>;
}

export interface UserUpdateWithWhereUniqueWithoutCoursesInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutCoursesDataInput;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  regNo?: Maybe<String>;
  gender?: Maybe<String>;
  department?: Maybe<DepartmentUpdateOneWithoutStudentsInput>;
  faculty?: Maybe<FacultyUpdateOneInput>;
  courses?: Maybe<CourseUpdateManyWithoutStudentsInput>;
  level?: Maybe<String>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  image?: Maybe<String>;
}

export interface UserUpdateWithoutCoursesDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  regNo?: Maybe<String>;
  gender?: Maybe<String>;
  department?: Maybe<DepartmentUpdateOneWithoutStudentsInput>;
  faculty?: Maybe<FacultyUpdateOneInput>;
  level?: Maybe<String>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  image?: Maybe<String>;
}

export interface FacultyUpdateInput {
  name?: Maybe<String>;
  departments?: Maybe<DepartmentUpdateManyWithoutFacultyInput>;
}

export interface DepartmentUpdateOneWithoutStudentsInput {
  create?: Maybe<DepartmentCreateWithoutStudentsInput>;
  update?: Maybe<DepartmentUpdateWithoutStudentsDataInput>;
  upsert?: Maybe<DepartmentUpsertWithoutStudentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<DepartmentWhereUniqueInput>;
}

export interface DepartmentCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  faculty: FacultyCreateOneWithoutDepartmentsInput;
  courses?: Maybe<CourseCreateManyWithoutDepartmentInput>;
  students?: Maybe<UserCreateManyWithoutDepartmentInput>;
}

export interface DepartmentUpdateWithoutStudentsDataInput {
  name?: Maybe<String>;
  faculty?: Maybe<FacultyUpdateOneRequiredWithoutDepartmentsInput>;
  courses?: Maybe<CourseUpdateManyWithoutDepartmentInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  regNo?: Maybe<String>;
}>;

export interface DepartmentUpsertWithoutStudentsInput {
  update: DepartmentUpdateWithoutStudentsDataInput;
  create: DepartmentCreateWithoutStudentsInput;
}

export interface FacultyCreateOneWithoutDepartmentsInput {
  create?: Maybe<FacultyCreateWithoutDepartmentsInput>;
  connect?: Maybe<FacultyWhereUniqueInput>;
}

export interface UserUpsertWithWhereUniqueWithoutCoursesInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutCoursesDataInput;
  create: UserCreateWithoutCoursesInput;
}

export interface FacultyCreateOneInput {
  create?: Maybe<FacultyCreateInput>;
  connect?: Maybe<FacultyWhereUniqueInput>;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  regNo?: Maybe<String>;
  regNo_not?: Maybe<String>;
  regNo_in?: Maybe<String[] | String>;
  regNo_not_in?: Maybe<String[] | String>;
  regNo_lt?: Maybe<String>;
  regNo_lte?: Maybe<String>;
  regNo_gt?: Maybe<String>;
  regNo_gte?: Maybe<String>;
  regNo_contains?: Maybe<String>;
  regNo_not_contains?: Maybe<String>;
  regNo_starts_with?: Maybe<String>;
  regNo_not_starts_with?: Maybe<String>;
  regNo_ends_with?: Maybe<String>;
  regNo_not_ends_with?: Maybe<String>;
  gender?: Maybe<String>;
  gender_not?: Maybe<String>;
  gender_in?: Maybe<String[] | String>;
  gender_not_in?: Maybe<String[] | String>;
  gender_lt?: Maybe<String>;
  gender_lte?: Maybe<String>;
  gender_gt?: Maybe<String>;
  gender_gte?: Maybe<String>;
  gender_contains?: Maybe<String>;
  gender_not_contains?: Maybe<String>;
  gender_starts_with?: Maybe<String>;
  gender_not_starts_with?: Maybe<String>;
  gender_ends_with?: Maybe<String>;
  gender_not_ends_with?: Maybe<String>;
  level?: Maybe<String>;
  level_not?: Maybe<String>;
  level_in?: Maybe<String[] | String>;
  level_not_in?: Maybe<String[] | String>;
  level_lt?: Maybe<String>;
  level_lte?: Maybe<String>;
  level_gt?: Maybe<String>;
  level_gte?: Maybe<String>;
  level_contains?: Maybe<String>;
  level_not_contains?: Maybe<String>;
  level_starts_with?: Maybe<String>;
  level_not_starts_with?: Maybe<String>;
  level_ends_with?: Maybe<String>;
  level_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface CourseCreateManyWithoutDepartmentInput {
  create?: Maybe<
    CourseCreateWithoutDepartmentInput[] | CourseCreateWithoutDepartmentInput
  >;
  connect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface DepartmentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  faculty?: Maybe<FacultyWhereInput>;
  courses_every?: Maybe<CourseWhereInput>;
  courses_some?: Maybe<CourseWhereInput>;
  courses_none?: Maybe<CourseWhereInput>;
  students_every?: Maybe<UserWhereInput>;
  students_some?: Maybe<UserWhereInput>;
  students_none?: Maybe<UserWhereInput>;
  AND?: Maybe<DepartmentWhereInput[] | DepartmentWhereInput>;
  OR?: Maybe<DepartmentWhereInput[] | DepartmentWhereInput>;
  NOT?: Maybe<DepartmentWhereInput[] | DepartmentWhereInput>;
}

export interface UserUpdateManyDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  regNo?: Maybe<String>;
  gender?: Maybe<String>;
  level?: Maybe<String>;
  phone?: Maybe<String>;
  address?: Maybe<String>;
  image?: Maybe<String>;
}

export interface FacultyUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface CourseUpsertWithWhereUniqueWithoutDepartmentInput {
  where: CourseWhereUniqueInput;
  update: CourseUpdateWithoutDepartmentDataInput;
  create: CourseCreateWithoutDepartmentInput;
}

export interface DepartmentUpsertWithoutCoursesInput {
  update: DepartmentUpdateWithoutCoursesDataInput;
  create: DepartmentCreateWithoutCoursesInput;
}

export interface CourseScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  creditUnit?: Maybe<Int>;
  creditUnit_not?: Maybe<Int>;
  creditUnit_in?: Maybe<Int[] | Int>;
  creditUnit_not_in?: Maybe<Int[] | Int>;
  creditUnit_lt?: Maybe<Int>;
  creditUnit_lte?: Maybe<Int>;
  creditUnit_gt?: Maybe<Int>;
  creditUnit_gte?: Maybe<Int>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  level?: Maybe<String>;
  level_not?: Maybe<String>;
  level_in?: Maybe<String[] | String>;
  level_not_in?: Maybe<String[] | String>;
  level_lt?: Maybe<String>;
  level_lte?: Maybe<String>;
  level_gt?: Maybe<String>;
  level_gte?: Maybe<String>;
  level_contains?: Maybe<String>;
  level_not_contains?: Maybe<String>;
  level_starts_with?: Maybe<String>;
  level_not_starts_with?: Maybe<String>;
  level_ends_with?: Maybe<String>;
  level_not_ends_with?: Maybe<String>;
  AND?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
  OR?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
  NOT?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
}

export interface DepartmentCreateOneWithoutCoursesInput {
  create?: Maybe<DepartmentCreateWithoutCoursesInput>;
  connect?: Maybe<DepartmentWhereUniqueInput>;
}

export interface CourseUpdateManyWithWhereNestedInput {
  where: CourseScalarWhereInput;
  data: CourseUpdateManyDataInput;
}

export interface DepartmentCreateManyWithoutFacultyInput {
  create?: Maybe<
    DepartmentCreateWithoutFacultyInput[] | DepartmentCreateWithoutFacultyInput
  >;
  connect?: Maybe<DepartmentWhereUniqueInput[] | DepartmentWhereUniqueInput>;
}

export interface CourseUpdateManyDataInput {
  name?: Maybe<String>;
  creditUnit?: Maybe<Int>;
  description?: Maybe<String>;
  level?: Maybe<String>;
}

export interface CourseSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CourseWhereInput>;
  AND?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
  OR?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
  NOT?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
}

export interface DepartmentUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface DepartmentUpdateManyWithWhereNestedInput {
  where: DepartmentScalarWhereInput;
  data: DepartmentUpdateManyDataInput;
}

export interface DepartmentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<DepartmentScalarWhereInput[] | DepartmentScalarWhereInput>;
  OR?: Maybe<DepartmentScalarWhereInput[] | DepartmentScalarWhereInput>;
  NOT?: Maybe<DepartmentScalarWhereInput[] | DepartmentScalarWhereInput>;
}

export interface DepartmentUpsertWithWhereUniqueWithoutFacultyInput {
  where: DepartmentWhereUniqueInput;
  update: DepartmentUpdateWithoutFacultyDataInput;
  create: DepartmentCreateWithoutFacultyInput;
}

export interface DepartmentUpdateInput {
  name?: Maybe<String>;
  faculty?: Maybe<FacultyUpdateOneRequiredWithoutDepartmentsInput>;
  courses?: Maybe<CourseUpdateManyWithoutDepartmentInput>;
  students?: Maybe<UserUpdateManyWithoutDepartmentInput>;
}

export interface UserCreateManyWithoutCoursesInput {
  create?: Maybe<
    UserCreateWithoutCoursesInput[] | UserCreateWithoutCoursesInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateManyWithoutDepartmentInput {
  create?: Maybe<
    UserCreateWithoutDepartmentInput[] | UserCreateWithoutDepartmentInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface CourseUpdateWithoutStudentsDataInput {
  name?: Maybe<String>;
  department?: Maybe<DepartmentUpdateOneRequiredWithoutCoursesInput>;
  creditUnit?: Maybe<Int>;
  description?: Maybe<String>;
  level?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  regNo: String;
  gender?: String;
  level?: String;
  phone?: String;
  address?: String;
  image?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  regNo: () => Promise<String>;
  gender: () => Promise<String>;
  level: () => Promise<String>;
  phone: () => Promise<String>;
  address: () => Promise<String>;
  image: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  regNo: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
}

export interface CourseEdge {
  node: Course;
  cursor: String;
}

export interface CourseEdgePromise extends Promise<CourseEdge>, Fragmentable {
  node: <T = CoursePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CourseEdgeSubscription
  extends Promise<AsyncIterator<CourseEdge>>,
    Fragmentable {
  node: <T = CourseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FacultyPreviousValues {
  id: ID_Output;
  name: String;
}

export interface FacultyPreviousValuesPromise
  extends Promise<FacultyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface FacultyPreviousValuesSubscription
  extends Promise<AsyncIterator<FacultyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface FacultyEdge {
  node: Faculty;
  cursor: String;
}

export interface FacultyEdgePromise extends Promise<FacultyEdge>, Fragmentable {
  node: <T = FacultyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FacultyEdgeSubscription
  extends Promise<AsyncIterator<FacultyEdge>>,
    Fragmentable {
  node: <T = FacultySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CourseConnection {
  pageInfo: PageInfo;
  edges: CourseEdge[];
}

export interface CourseConnectionPromise
  extends Promise<CourseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CourseEdge>>() => T;
  aggregate: <T = AggregateCoursePromise>() => T;
}

export interface CourseConnectionSubscription
  extends Promise<AsyncIterator<CourseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CourseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCourseSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Faculty {
  id: ID_Output;
  name: String;
}

export interface FacultyPromise extends Promise<Faculty>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  departments: <T = FragmentableArray<Department>>(args?: {
    where?: DepartmentWhereInput;
    orderBy?: DepartmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FacultySubscription
  extends Promise<AsyncIterator<Faculty>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  departments: <T = Promise<AsyncIterator<DepartmentSubscription>>>(args?: {
    where?: DepartmentWhereInput;
    orderBy?: DepartmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FacultyNullablePromise
  extends Promise<Faculty | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  departments: <T = FragmentableArray<Department>>(args?: {
    where?: DepartmentWhereInput;
    orderBy?: DepartmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Course {
  id: ID_Output;
  name: String;
  creditUnit: Int;
  description: String;
  level: String;
}

export interface CoursePromise extends Promise<Course>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  department: <T = DepartmentPromise>() => T;
  creditUnit: () => Promise<Int>;
  students: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  description: () => Promise<String>;
  level: () => Promise<String>;
}

export interface CourseSubscription
  extends Promise<AsyncIterator<Course>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  department: <T = DepartmentSubscription>() => T;
  creditUnit: () => Promise<AsyncIterator<Int>>;
  students: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  description: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<String>>;
}

export interface CourseNullablePromise
  extends Promise<Course | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  department: <T = DepartmentPromise>() => T;
  creditUnit: () => Promise<Int>;
  students: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  description: () => Promise<String>;
  level: () => Promise<String>;
}

export interface CourseSubscriptionPayload {
  mutation: MutationType;
  node: Course;
  updatedFields: String[];
  previousValues: CoursePreviousValues;
}

export interface CourseSubscriptionPayloadPromise
  extends Promise<CourseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CoursePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CoursePreviousValuesPromise>() => T;
}

export interface CourseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CourseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CourseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CoursePreviousValuesSubscription>() => T;
}

export interface DepartmentEdge {
  node: Department;
  cursor: String;
}

export interface DepartmentEdgePromise
  extends Promise<DepartmentEdge>,
    Fragmentable {
  node: <T = DepartmentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DepartmentEdgeSubscription
  extends Promise<AsyncIterator<DepartmentEdge>>,
    Fragmentable {
  node: <T = DepartmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CoursePreviousValues {
  id: ID_Output;
  name: String;
  creditUnit: Int;
  description: String;
  level: String;
}

export interface CoursePreviousValuesPromise
  extends Promise<CoursePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  creditUnit: () => Promise<Int>;
  description: () => Promise<String>;
  level: () => Promise<String>;
}

export interface CoursePreviousValuesSubscription
  extends Promise<AsyncIterator<CoursePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  creditUnit: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCourse {
  count: Int;
}

export interface AggregateCoursePromise
  extends Promise<AggregateCourse>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCourseSubscription
  extends Promise<AsyncIterator<AggregateCourse>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  regNo: String;
  gender?: String;
  level?: String;
  phone?: String;
  address?: String;
  image?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  regNo: () => Promise<String>;
  gender: () => Promise<String>;
  department: <T = DepartmentPromise>() => T;
  faculty: <T = FacultyPromise>() => T;
  courses: <T = FragmentableArray<Course>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  level: () => Promise<String>;
  phone: () => Promise<String>;
  address: () => Promise<String>;
  image: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  regNo: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  department: <T = DepartmentSubscription>() => T;
  faculty: <T = FacultySubscription>() => T;
  courses: <T = Promise<AsyncIterator<CourseSubscription>>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  level: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  regNo: () => Promise<String>;
  gender: () => Promise<String>;
  department: <T = DepartmentPromise>() => T;
  faculty: <T = FacultyPromise>() => T;
  courses: <T = FragmentableArray<Course>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  level: () => Promise<String>;
  phone: () => Promise<String>;
  address: () => Promise<String>;
  image: () => Promise<String>;
}

export interface AggregateFaculty {
  count: Int;
}

export interface AggregateFacultyPromise
  extends Promise<AggregateFaculty>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFacultySubscription
  extends Promise<AsyncIterator<AggregateFaculty>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FacultySubscriptionPayload {
  mutation: MutationType;
  node: Faculty;
  updatedFields: String[];
  previousValues: FacultyPreviousValues;
}

export interface FacultySubscriptionPayloadPromise
  extends Promise<FacultySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FacultyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FacultyPreviousValuesPromise>() => T;
}

export interface FacultySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FacultySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FacultySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FacultyPreviousValuesSubscription>() => T;
}

export interface Department {
  id: ID_Output;
  name: String;
}

export interface DepartmentPromise extends Promise<Department>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  faculty: <T = FacultyPromise>() => T;
  courses: <T = FragmentableArray<Course>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  students: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DepartmentSubscription
  extends Promise<AsyncIterator<Department>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  faculty: <T = FacultySubscription>() => T;
  courses: <T = Promise<AsyncIterator<CourseSubscription>>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  students: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DepartmentNullablePromise
  extends Promise<Department | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  faculty: <T = FacultyPromise>() => T;
  courses: <T = FragmentableArray<Course>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  students: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DepartmentPreviousValues {
  id: ID_Output;
  name: String;
}

export interface DepartmentPreviousValuesPromise
  extends Promise<DepartmentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface DepartmentPreviousValuesSubscription
  extends Promise<AsyncIterator<DepartmentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface DepartmentSubscriptionPayload {
  mutation: MutationType;
  node: Department;
  updatedFields: String[];
  previousValues: DepartmentPreviousValues;
}

export interface DepartmentSubscriptionPayloadPromise
  extends Promise<DepartmentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DepartmentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DepartmentPreviousValuesPromise>() => T;
}

export interface DepartmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DepartmentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DepartmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DepartmentPreviousValuesSubscription>() => T;
}

export interface FacultyConnection {
  pageInfo: PageInfo;
  edges: FacultyEdge[];
}

export interface FacultyConnectionPromise
  extends Promise<FacultyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FacultyEdge>>() => T;
  aggregate: <T = AggregateFacultyPromise>() => T;
}

export interface FacultyConnectionSubscription
  extends Promise<AsyncIterator<FacultyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FacultyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFacultySubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DepartmentConnection {
  pageInfo: PageInfo;
  edges: DepartmentEdge[];
}

export interface DepartmentConnectionPromise
  extends Promise<DepartmentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DepartmentEdge>>() => T;
  aggregate: <T = AggregateDepartmentPromise>() => T;
}

export interface DepartmentConnectionSubscription
  extends Promise<AsyncIterator<DepartmentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DepartmentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDepartmentSubscription>() => T;
}

export interface AggregateDepartment {
  count: Int;
}

export interface AggregateDepartmentPromise
  extends Promise<AggregateDepartment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDepartmentSubscription
  extends Promise<AsyncIterator<AggregateDepartment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Course",
    embedded: false
  },
  {
    name: "Faculty",
    embedded: false
  },
  {
    name: "Department",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
